disable_mlock = true
log_level = "Debug"

listener "tcp" {
  address = "0.0.0.0:9200"
  purpose = "api"
  tls_disable   = false
  tls_cert_file = "{{ tls_dir }}/boundary-cert.pem"
  tls_key_file  = "{{ tls_dir }}/boundary-key.pem"
}

listener "tcp" {
  address = "0.0.0.0:9201"
  purpose = "cluster"
}

listener "tcp" {
  address = "0.0.0.0:9203"
  purpose = "ops"
  tls_disable   = false
  tls_cert_file = "{{ tls_dir }}/boundary-cert.pem"
  tls_key_file  = "{{ tls_dir }}/boundary-key.pem"
}

controller {
  name = "boundary-controller-1"
  description = "boundary-controller-1"
  public_cluster_addr = "{{ public_url }}"
  graceful_shutdown_wait_duration = "10s"
  database {
      url = "env://POSTGRESQL_CONNECTION_STRING"
  }
}

events {
  audit_enabled       = true
  sysevents_enabled   = true
  observations_enable = true
  sink "stderr" {
    name = "all-events"
    description = "All events sent to stderr"
    event_types = ["*"]
    format = "cloudevents-json"
  }
  sink {
    name = "file-sink"
    description = "All events sent to a file"
    event_types = ["*"]
    format = "cloudevents-json"
    file {
      path = "/var/log/boundary"
      file_name = "controller.log"
    }
    audit_config {
      audit_filter_overrides {
        sensitive = "redact"
        secret    = "redact"
      }
    }
  }
}

kms "gcpckms" {
  purpose     = "root"
  credentials = "/usr/boundary/kms-sa.json"
  project     = "{{ kms_project }}"
  region      = "{{ kms_region }}"
  key_ring    = "boundary-keyring"
  crypto_key  = "boundary-key-root"
}

kms "gcpckms" {
  purpose     = "recovery"
  credentials = "/usr/boundary/kms-sa.json"
  project     = "{{ kms_project }}"
  region      = "{{ kms_region }}"
  key_ring    = "boundary-keyring"
  crypto_key  = "boundary-key-recovery"
}

kms "gcpckms" {
  purpose     = "worker-auth"
  credentials = "/usr/boundary/kms-sa.json"
  project     = "{{ kms_project }}"
  region      = "{{ kms_region }}"
  key_ring    = "boundary-keyring"
  crypto_key  = "boundary-key-worker-auth"
}

kms "gcpckms" {
  purpose     = "bsr"
  credentials = "/usr/boundary/kms-sa.json"
  project     = "{{ kms_project }}"
  region      = "{{ kms_region }}"
  key_ring    = "boundary-keyring"
  crypto_key  = "boundary-key-bsr"
}
